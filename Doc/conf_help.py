# -*- coding: utf-8 -*-
#
# nMoldyn documentation build configuration file, created by Gael Goret
# on Fri Feb 28 10:35:22 2014.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os
#
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

sys.path.append(os.path.abspath('../nMOLDYN'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.graphviz','sphinx.ext.pngmath']#,'rst2pdf.pdfbuilder']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'nMoldyn'
copyright = u'2014, B. Aoun & G. Goret & E. Pellegrini, G.R. Kneller'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '4.0'
# The full version, including alpha/beta/rc tags.
release = '4.0'

# List of directories, relative to source directory, that shouldn't be searched
# for source files.
exclude_patterns = ['Externals','_build', '**Tests**']

html_logo = '_static/nMoldyn_logo.png'

inheritance_graph_attrs = dict(size='""')
	
inheritance_graph_attrs = dict(rankdir="TB", size='""')

inheritance_node_attrs = dict(color='lightblue', style='filled')


# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'



# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "default"
html_theme_options = {'sidebarwidth':250}#, 'nosidebar':True}

html_show_copyright = False


# Output file base name for HTML help builder.
htmlhelp_basename = 'nMoldyndoc'



# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'nMoldyn.tex', u'nMoldyn Documentation',
   u'B. Aoun \\& G. Goret \\& E. Pellegrini, G.R. Kneller', 'manual'),
]

#pdf_documents = [
#  ('index', 'nMoldyn', u'nMoldyn Documentation',
#   u'B. Aoun & G. Goret & E. Pellegrini, G.R. Kneller'),
#]



exclude_patterns = ['nMOLDYN.Externals**', 'nMOLDYN.nMOLDYN.__pkginfo__']

members_to_watch = ['class']

def flag_onthefly(app, what, name, obj, options, lines):
    if(what in members_to_watch):
        # and modify the docstring so the rendered output is highlights the omission
    	if lines:
    	   lines.insert(0,'    **Description:**\n\n\n')
#    	lines.insert(0,'    .. inheritance-diagram:: %s\n'%name.split('.')[-1])
#    	lines.insert(0,'**inheritance-diagram:**\n\n')



def autodoc_skip_member(app, what, name, obj, skip, options):
    
    if what in ['method','attribut','function','exception']:
        return True
    exclusions = ('__weakref__',  # special-members
                  '__doc__', '__module__', '__dict__',  # undoc-members
                  )
    if name in exclusions:
        return True
        
    if what in ['class']:
        if name is not '__doc__':
            return True
            
    return skip

def setup(app):
    app.connect('autodoc-skip-member', autodoc_skip_member)
    app.connect('autodoc-process-docstring', flag_onthefly)

	
