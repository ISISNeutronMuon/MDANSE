.. _mdanse-batch-jobs-tutorial:

=============================================
Running Batch Jobs in MDANSE: A Detailed Tutorial
=============================================

Introduction
------------
This tutorial provides a step-by-step guide on how to efficiently run batch jobs in MDANSE, a software tool used for analyzing molecular dynamics simulations. Batch processing is ideal for processing multiple datasets and conducting complex analyses.

Prerequisites
-------------
Before you begin, make sure you have the following:

- **MDANSE Installed:** The MDANSE software must be installed on your system.
- **Basic Knowledge:** A fundamental understanding of both MDANSE's user interface and general concepts in molecular dynamics is required.

Step 1: Prepare Your Analysis
-----------------------------
The first step involves preparing your data and setting up the parameters for your analysis.

- **Select Data Files:** Choose the molecular dynamics simulation files, typically in HDF format.
- **Set Analysis Parameters:** Define the specific analysis you wish to perform, such as Radial Distribution Function (RDF).
- **Configure Output Options:** Decide on the output format (preferably JSON) and the destination folder for the results.

.. code-block:: python

   # Python snippet to define simulation files and parameters
   simulation_files = ["path/to/simulation1.hdf", "path/to/simulation2.hdf"]
   analysis_type = "RadialDistributionFunction"
   output_format = "json"
   output_directory = "/path/to/output/"

Step 2: Create a Batch Job Script
---------------------------------
Next, create a script that automates the execution of MDANSE using its command-line interface.

- **Scripting:** The script should invoke MDANSE's command-line interface to process each file.

.. code-block:: bash

   #!/bin/bash
   # Batch script for MDANSE analysis
   simulation_files=("path/to/simulation1.hdf" "path/to/simulation2.hdf")
   analysis_type="RadialDistributionFunction"
   output_format="json"
   output_directory="/path/to/output/"

   for file in "${simulation_files[@]}"; do
     output_file="$output_directory/$(basename ${file%.*}).$output_format"
     echo "Processing $file"
     mdanse run -t $analysis_type -i "$file" -o "$output_file"
   done

Step 3: Customizing the Batch Script
------------------------------------
Tailor the script to suit various analysis needs or handle multiple files efficiently.

- **Looping and Conditional Logic:** Implement loops and conditions to process different types of analyses.

.. code-block:: bash

   #!/bin/bash
   # Customized batch script for MDANSE
   declare -A analysis_params
   analysis_params["RadialDistributionFunction"]="rdf"
   analysis_params["AnotherAnalysisType"]="other"

   for file in /path/to/simulations/*.hdf; do
     for analysis in "${!analysis_params[@]}"; do
       suffix=${analysis_params[$analysis]}
       output_file="/path/to/output/$(basename ${file%.*})_$suffix.json"
       echo "Running $analysis on $file"
       mdanse run -t $analysis -i "$file" -o "$output_file"
     done
   done

Step 4: Run the Batch Job
--------------------------
With the script ready, execute it to start the batch processing.

.. code-block:: bash

   # Command to run the batch script
   bash run_mdanse_batch.sh

Step 5: Monitoring Progress
---------------------------
It's important to monitor the progress of your batch job and troubleshoot if needed.

- **Monitor Output:** Keep an eye on the terminal for real-time output that indicates the progress of the batch job.
- **Error Handling:** Watch out for error messages and be prepared to debug if necessary.

.. code-block:: bash

   # Example command to monitor MDANSE processes
   watch -n 1 'ps aux | grep mdanse'

Step 6: Reviewing Batch Job Results
-----------------------------------
After completion, analyze the results generated by the batch job.

- **Accessing Results:** The output will be JSON files in the specified directory.
- **Data Interpretation:** Write scripts to parse and understand the output data.

.. code-block:: python

   # Python script to read and plot results from JSON files
   import json
   import matplotlib.pyplot as plt

   output_files = ["output/rdf_simulation1.json", "output/rdf_simulation2.json"]

   for file in output_files:
       with open(file, 'r') as f:
           data = json.load(f)
           plt.plot(data['distance'], data['rdf'], label=file)

   plt.xlabel('Distance (angstrom)')
   plt.ylabel('RDF Value')
   plt.title('Radial Distribution Function Analysis')
   plt.legend()
   plt.show()
