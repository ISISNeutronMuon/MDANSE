name: CI/CD

on: [push, workflow_dispatch]

jobs:
  ci_ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-18.04', 'ubuntu-20.04']

    steps:
      - uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'

      - name: Install libraries on ubuntu 18
        if: ${{ (matrix.os == 'ubuntu-18.04') }}
        run: |
          sudo apt-get update
          sudo apt-get install netcdf-bin libnetcdf-dev python-dev

      - name: Install libraries on ubuntu 20
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        run: |
          sudo apt-get update
          sudo apt-get install netcdf-bin libnetcdf-dev python-dev libgtk2.0-0 libgtk2.0-dev

      - name: Install dependencies
        run: |
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb docutils==0.17.1 pyyaml
          sudo cp /usr/include/netcdf.h $RUNNER_TOOL_CACHE/Python/2.7.18/x64/include/python2.7

      - name: Install netCDF4 python package
        run: |
          sudo conda create -p ~/tempenv python=2.7
          sudo conda install -p ~/tempenv netcdf4
          sudo cp -rfv ~/tempenv/lib/python2.7/site-packages/cftime $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp -rfv ~/tempenv/lib/python2.7/site-packages/netCDF4/ $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages/
          sudo cp -rfv ~/tempenv/lib/libhdf5* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libnetcdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libmfhdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libjpeg* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib

      - name: Install ScientificPython
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd scientific-python/
          sudo $RUNNER_TOOL_CACHE/Python/2.7.18/x64/bin/python setup.py install

      - name: Install MMTK
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          sudo cp -fv $GITHUB_WORKSPACE/BuildServer/Unix/setup.py ~/mmtk
          sudo $RUNNER_TOOL_CACHE/Python/2.7.18/x64/bin/python setup.py install

      - name: Install MDANSE
        run: |
          cd $GITHUB_WORKSPACE
          sudo cp -fv $GITHUB_WORKSPACE/BuildServer/setup.py $GITHUB_WORKSPACE
          $RUNNER_TOOL_CACHE/Python/2.7.18/x64/bin/python setup.py install

      - name: Run tests
        run: |
          export PATH=$PATH:/usr/lib/x86_64-linux-gnu
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          $GITHUB_WORKSPACE/BuildServer/Unix/tests.sh

      - name: Tar artifacts
        if: |
          contains( github.ref, 'main' ) ||
          contains( github.ref, 'develop' ) ||
          contains( github.ref, 'release-' ) ||
          contains( github.ref, 'hotfix-' ) ||
          contains( github.ref, 'build-' ) ||
          contains( github.ref, 'tags' ) ||
          contains( github.ref, 'web' )
        run: |
          cd $RUNNER_TOOL_CACHE/Python/2.7.18
          mv x64 python
          tar -czf python.tar.gz python

      - name: Upload artifacts
        if: |
          contains( github.ref, 'main' ) ||
          contains( github.ref, 'develop' ) ||
          contains( github.ref, 'release-' ) ||
          contains( github.ref, 'hotfix-' ) ||
          contains( github.ref, 'build-' ) ||
          contains( github.ref, 'tags' ) ||
          contains( github.ref, 'web' )
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_artifacts
          path: ${{ runner.tool_cache }}/Python/2.7.18/python.tar.gz
          retention-days: 1


  deploy_ubuntu:
    needs: ci_ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-18.04', 'ubuntu-20.04']
    if: |
      contains( github.ref, 'main' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}_artifacts
          path: ~/

      - name: Untar artifacts
        run: tar -xzf ~/python.tar.gz -C $HOME

      - name: Install netcdf
        run: |
          sudo apt-get update
          sudo apt-get install netcdf-bin libnetcdf-dev

      - name: Install wx
        run: |
          sudo conda create -p ~/tempenv python=2.7
          sudo conda install -p ~/tempenv -c daf wxpython
          sudo cp -r ~/tempenv/lib/python2.7/site-packages/wx-3.0-gtk2/wx ~/python/lib/python2.7/site-packages
          sudo cp -r ~/tempenv/lib/wx ~/python/lib
          sudo cp -r ~/tempenv/include/wx-3.0/wx ~/python/include
          sudo cp ~/tempenv/lib/libwx* ~/python/lib

      - name: Install vtk
        run: |
          sudo conda install -p ~/tempenv -c ccordoba12 vtk
          sudo cp -r ~/tempenv/lib/python2.7/site-packages/vtk ~/python/lib/python2.7/site-packages
          sudo cp ~/tempenv/lib/libvtk* ~/python/lib

      - run: sudo apt-get install dos2unix

      - name: Deploy
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/deploy.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_installer
          path: ${{ github.workspace }}/*.deb
          retention-days: 90

      - name: Edit postinst
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        run: sed -i '$ a ln -s /usr/lib/x86_64-linux-gnu/libnetcdf.so.18 /usr/local/lib/libnetcdf.so.15' $GITHUB_WORKSPACE/BuildServer/Unix/Debian/Resources/DEBIAN/postinst

      - name: Deploy for ubuntu 21
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          export DISTRO=ubuntu-21.04
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/deploy.sh

      - name: Upload ubuntu21 artifacts
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-21.04_installer
          path: ${{ github.workspace }}/*21*.deb
          retention-days: 90



  # OSX
  ci_osx:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['macos-10.15', 'macos-11']

    steps:
      - uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'

      - name: Install dependecies with pip
        run: |
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb docutils==0.17.1 py2app==0.26.1 pyyaml

      - name: Install netCDF4 python package
        run: |
          sudo conda create -p ~/tempenv python=2.7
          sudo conda install -p ~/tempenv netcdf4
          sudo cp -rfv ~/tempenv/lib/python2.7/site-packages/cftime $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp -rfv ~/tempenv/lib/python2.7/site-packages/netCDF4/ $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages/
          sudo cp -rfv ~/tempenv/lib/libhdf5* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libnetcdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libmfhdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -rfv ~/tempenv/lib/libjpeg* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib

      - name: Install NetCDF
        run: |
          brew install netcdf
          sudo cp -r /usr/local/include/netcdf $RUNNER_TOOL_CACHE/Python/2.7.18/x64/include

      - name: Install ScientificPython
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd scientific-python
          sudo python2 setup.py install

      - name: Install MMTK
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          sudo cp -fv $GITHUB_WORKSPACE/BuildServer/Unix/setup.py $HOME/mmtk
          sudo python2 setup.py install

      - name: Install MDANSE
        run: |
          cd $GITHUB_WORKSPACE
          sudo cp -fv $GITHUB_WORKSPACE/BuildServer/setup.py $GITHUB_WORKSPACE
          python2 setup.py install

      - name: Run unit tests
        run: |
          cd $GITHUB_WORKSPACE/Tests/UnitTests
          python2 AllTests.py

      - name: Run dependency tests
        run: |
          cd $GITHUB_WORKSPACE/Tests/DependenciesTests
          python2 AllTests.py

      - name: Run functional tests
        run: |
          cd $GITHUB_WORKSPACE/Tests/FunctionalTests/Jobs
          python2 BuildJobTests.py
          python2 AllTests.py

      - name: Tar python
        if: |
          (contains( github.ref, 'main' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'develop' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'release-' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'hotfix-' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'build-' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'tags' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'web' ) && ${{ (matrix.os == 'macos-10.15') }})
        run: |
          cd $RUNNER_TOOL_CACHE/Python/2.7.18
          mv x64 Resources
          tar -czf python.tar.gz Resources

      - name: Upload artifacts
        if: |
          (contains( github.ref, 'main' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'develop' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'release-' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'hotfix-' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'build-' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'tags' ) && ${{ (matrix.os == 'macos-10.15') }}) ||
          (contains( github.ref, 'web' ) && ${{ (matrix.os == 'macos-10.15') }})
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_artifacts
          path: ${{ runner.tool_cache }}/Python/2.7.18/python.tar.gz
          retention-days: 1


  deploy_osx:
    needs: ci_osx
    runs-on: macos-10.15
    if: |
      contains( github.ref, 'main' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos-10.15_artifacts
          path: ~/

      - run: brew install netcdf

      - name: Untar python
        run: |
          mkdir -p ~/Contents
          tar -xzf ~/python.tar.gz -C $HOME/Contents

      - name: Install vtk
        run: |
          sudo conda create -p $HOME/tempenv python=2.7
          sudo conda install -p $HOME/tempenv -c free vtk
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/vtk ~/Contents/Resources/lib/python2.7/site-packages
          sudo cp $HOME/tempenv/lib/libvtk* ~/Contents/Resources/lib

      - name: Install wx
        run: |
          sudo conda install -p $HOME/tempenv -c david_baddeley wxpython
          sudo cp -rv $HOME/tempenv/lib/python2.7/site-packages/wx-3.0-osx_cocoa/* ~/Contents/Resources/lib/python2.7/site-packages
          sudo cp -v $HOME/tempenv/lib/libwx*  ~/Contents/Resources/lib

      - name: Deploy MDANSE
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/deploy.sh
          sudo cp -fv $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/Resources/README.txt $GITHUB_WORKSPACE

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MacOS executable
          path: |
            ${{ github.workspace }}/*.dmg
            ${{ github.workspace }}/README.txt
          retention-days: 90



  # WINDOWS
  ci_windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2

      - name: Restore cached python
        id: python-cache
        uses: actions/cache@v2
        with:
          path: ${{ runner.tool_cache }}\Python\2.7.18\x64
          key: mdanse

      - name: Install python if not restored
        if: steps.python-cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'

      - name: Always upgrade dependencies
        run: |
          "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe" -m pip install --upgrade numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb docutils==0.17.1 pyyaml
        shell: cmd

      - name: Create conda environment
        run: C:\Miniconda\condabin\conda.bat create -p D:\tempenv python=2.7
        shell: cmd

      - name: Install netCDF4 into the environment
        run: C:\Miniconda\condabin\conda.bat install -p D:\tempenv netcdf4
        shell: cmd

      - name: Copy installed packages to main python and copy netcdf dlls into netCDF directory
        run: |
          xcopy "D:\tempenv\lib\site-packages\netCDF4" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\lib\site-packages\netCDF4\" /e /r /h /a /y /I /f
          xcopy "D:\tempenv\lib\site-packages\cftime" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\lib\site-packages\cftime\" /e /r /h /a /y /I /f
          copy %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\*.dll %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\lib\site-packages\netCDF4\
        shell: cmd

      - name: Install static dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          copy C:\Windows\System32\python27.dll %RUNNER_TOOL_CACHE%\Python\2.7.18\x64
          cd "%GITHUB_WORKSPACE%\BuildServer\Windows\Dependencies\"
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe -m pip install PyQt4‑4.11.4‑cp27‑cp27m‑win_amd64.whl VTK‑6.3.0‑cp27‑cp27m‑win_amd64.whl wxPython_common‑3.0.2.0‑py2‑none‑any.whl wxPython‑3.0.2.0‑cp27‑none‑win_amd64.whl
          mkdir %HOME%\netcdf
        shell: cmd

      - name: Prepare NetCDF if not cached
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          choco install 7zip
          Invoke-WebRequest https://downloads.unidata.ucar.edu/netcdf-c/4.8.1/netCDF4.8.1-NC3-64.exe -UseBasicParsing -Outfile "$env:HOME\netcdf\netCDF.exe"

      - name: Extract NetCDF if not cached
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          cd %HOME%\netcdf
          "C:\Program Files\7-Zip\7z.exe" e netCDF.exe
          mkdir "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          copy "%HOME%\netcdf" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
        shell: cmd

      - name: Restore VS2008 from cache
        if: steps.python-cache.outputs.cache-hit == 'true'
        id: vs2008-cache
        uses: actions/cache@v2
        with:
          path: |
            C:\Program Files (x86)\Microsoft Visual Studio 9.0
            C:\Program Files\Microsoft SDKs\Windows\v6.0A
          key: vs2008

      - name: Install VS2008 if not cached
        if: steps.vs2008-cache.outputs.cache-hit != 'true'
        run: |
          cd $env:HOME
          Invoke-WebRequest http://download.microsoft.com/download/8/1/d/81d3f35e-fa03-485b-953b-ff952e402520/VS2008ProEdition90dayTrialENUX1435622.iso -UseBasicParsing -Outfile $env:HOME\vs2008.iso
          Mount-DiskImage -ImagePath $env:HOME\vs2008.iso
          Start-Process E:\Setup\setup.exe -ArgumentList "/q /full /norestart" -Wait

      - name: Restore cached VC++ For Python2.7
        id: vcpython-cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}\vcpython.msi
          key: vcpython

      - name: Download VC++ For Python2.7 if not cached
        if: steps.vcpython-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest https://web.archive.org/web/20210106040224/https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi -UseBasicParsing -Outfile $env:GITHUB_WORKSPACE\vcpython.msi

      - name: Install VC++ For Python2.7
        run: Start-Process $env:GITHUB_WORKSPACE\vcpython.msi -ArgumentList "/quiet /passive /norestart" -Wait

      - name: Install ScientificPython
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          cd %GITHUB_WORKSPACE%
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd scientific-python
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe setup.py build --netcdf_prefix="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf" --netcdf_dll="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe setup.py install --netcdf_prefix="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf" --netcdf_dll="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf.dll" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Lib\site-packages\Scientific"
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf.h" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Include\Scientific"
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf.lib" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Lib\site-packages\Scientific"
        shell: cmd

      - name: Install MMTK
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          cd %GITHUB_WORKSPACE%
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe setup.py build install
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\vcruntime140.dll" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Lib\site-packages\Scientific"
        shell: cmd

      - name: Install MDANSE
        run: |
          set PATH="C:\Program Files (x86)\Microsoft Visual Studio 9.0\";"C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\Bin\x86_amd64";%PATH%
          cd %GITHUB_WORKSPACE%
          copy /y "%GITHUB_WORKSPACE%\BuildServer\setup.py" %GITHUB_WORKSPACE%
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe setup.py build install
        shell: cmd

      - name: Run tests
        run: |
          cd %GITHUB_WORKSPACE%\Tests
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe UnitTests\AllTests.py
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe DependenciesTests\AllTests.py
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe FunctionalTests\Jobs\BuildJobTests.py
          %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe FunctionalTests\Jobs\AllTests.py
        shell: cmd

  deploy_windows:
    needs: ci_windows
    runs-on: windows-2019
    if: |
      contains( github.ref, 'main' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
    steps:
      - uses: actions/checkout@v2

      - name: Restore cached python
        id: python-cache
        uses: actions/cache@v2
        with:
          path: ${{ runner.tool_cache }}\Python\2.7.18\x64
          key: mdanse

      - name: Error out if python cache has not been restored
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: exit
        shell: cmd

      - name: Restore VS2008 from cache
        id: vs2008-cache
        uses: actions/cache@v2
        with:
          path: |
            C:\Program Files (x86)\Microsoft Visual Studio 9.0
            C:\Program Files\Microsoft SDKs\Windows\v6.0A
          key: vs2008

      - name: Install VS2008 if not cached
        if: steps.vs2008-cache.outputs.cache-hit == 'false'
        run: |
          cd $env:HOME
          Invoke-WebRequest http://download.microsoft.com/download/8/1/d/81d3f35e-fa03-485b-953b-ff952e402520/VS2008ProEdition90dayTrialENUX1435622.iso -UseBasicParsing -Outfile $env:HOME\vs2008.iso
          Mount-DiskImage -ImagePath $env:HOME\vs2008.iso
          Start-Process E:\Setup\setup.exe -ArgumentList "/q /full /norestart" -Wait

      - name: Restore cached VC++ For Python2.7
        id: vcpython-cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}\vcpython.msi
          key: vcpython

      - name: Download VC++ For Python2.7 if not cached
        if: steps.vcpython-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest https://web.archive.org/web/20210106040224/https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi -UseBasicParsing -Outfile $env:GITHUB_WORKSPACE\vcpython.msi

      - name: Install VC++ For Python2.7
        run: Start-Process $env:GITHUB_WORKSPACE\vcpython.msi -ArgumentList "/quiet /passive /norestart" -Wait

      - name: Always upgrade dependencies
        run: |
          "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\python.exe" -m pip install --upgrade numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb docutils==0.17.1 pyyaml
        shell: cmd

      - name: Create conda environment
        run: C:\Miniconda\condabin\conda.bat create -p D:\tempenv python=2.7
        shell: cmd

      - name: Install netCDF4 into the environment
        run: C:\Miniconda\condabin\conda.bat install -p D:\tempenv netcdf4
        shell: cmd

      - name: Copy installed packages to main python and copy netcdf dlls into netCDF directory
        run: |
          xcopy "D:\tempenv\lib\site-packages\netCDF4" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\lib\site-packages\netCDF4\" /e /r /h /a /y /I /f
          xcopy "D:\tempenv\lib\site-packages\cftime" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\lib\site-packages\cftime\" /e /r /h /a /y /I /f
          copy %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\*.dll %RUNNER_TOOL_CACHE%\Python\2.7.18\x64\lib\site-packages\netCDF4\ /y
        shell: cmd

      - name: Deploy
        run: |
          mkdir %GITHUB_WORKSPACE%\BuildServer\Windows\Build
          cd %GITHUB_WORKSPACE%\BuildServer\Windows\Build\
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\definitions.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\setup_ci.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\deploy.bat"
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_executable
          path: ${{ github.workspace }}\*.exe
          retention-days: 90