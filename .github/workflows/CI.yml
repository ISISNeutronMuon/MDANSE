name: CI/CD

on: [push, workflow_dispatch]

jobs:
  ci_ubuntu:
    runs-on: ${{ matrix.os }}
    if: False
    strategy:
      matrix:
        os: ['ubuntu-18.04', 'ubuntu-20.04']
    steps:
      - uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'
      - name: Install libraries
        if: ${{ (matrix.os == 'ubuntu-18.04') }}
        run: sudo apt-get install netcdf-bin libnetcdf-dev libwxgtk3.0-dev python-wxgtk3.0 libvtk6.3 libvtk6-dev python-vtk6 python-dev
      - name: Install libraries
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        run: sudo apt-get install netcdf-bin libnetcdf-dev python-dev libgtk2.0-0 libgtk2.0-dev
      - name: Install dependencies
        run: |
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb
          sudo cp /usr/include/netcdf.h $RUNNER_TOOL_CACHE/Python/2.7.18/x64/include/python2.7
          sudo cp /usr/lib/x86_64-linux-gnu/libnetcdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
      - name: Install wx and vtk
        run: |
          sudo conda create -p $HOME/tempenv python=2.7
          sudo conda install -p $HOME/tempenv -c daf wxpython
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/wx-3.0-gtk2/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp -r $HOME/tempenv/lib/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -r $HOME/tempenv/include/wx-3.0/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/include
          sudo cp $HOME/tempenv/lib/libwx* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo conda install -p $HOME/tempenv -c ccordoba12 vtk
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/vtk $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp $HOME/tempenv/lib/libvtk* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
        if:
      - name: Install wx and vtk
        run: |
          sudo conda create -p $HOME/tempenv python=2.7
          sudo conda install -p $HOME/tempenv -c daf wxpython
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/wx-3.0-gtk2/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp -r $HOME/tempenv/lib/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp -r $HOME/tempenv/include/wx-3.0/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/include
          sudo cp $HOME/tempenv/lib/libwx* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo conda install -p $HOME/tempenv -c ccordoba12 vtk
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/vtk $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp $HOME/tempenv/lib/libvtk* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
      - name: Install ScientificPython
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd scientific-python/
          sudo $RUNNER_TOOL_CACHE/Python/2.7.18/x64/bin/python setup.py install
      - name: Install MMTK
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          sudo rm setup.py
          sudo cp $GITHUB_WORKSPACE/BuildServer/Unix/setup.py $HOME/mmtk
          sudo $RUNNER_TOOL_CACHE/Python/2.7.18/x64/bin/python setup.py install
      - name: Install MDANSE
        run: |
          cd $GITHUB_WORKSPACE
          $RUNNER_TOOL_CACHE/Python/2.7.18/x64/bin/python setup.py install
      - name: Run tests
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          $GITHUB_WORKSPACE/BuildServer/Unix/tests.sh
      - run: |
          cd $RUNNER_TOOL_CACHE/Python/2.7.18
          mv x64 python
          tar -czf python.tar.gz python
      - name: Upload artifacts
        if: ${{ (matrix.os == 'ubuntu-18.04') }}
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu_artifacts
          path: ${{ runner.tool_cache }}/Python/2.7.18/python.tar.gz
          retention-days: 1

  deploy_ubuntu:
    needs: ci_ubuntu
    runs-on: ubuntu-18.04
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, '19_continuous_integration' )
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu_artifacts
          path: ~/
      - name: Untar artifacts
        run: |
          tar -xzf ~/python.tar.gz -C $HOME
          sudo apt-get install netcdf-bin libnetcdf-dev
      - run: sudo apt-get install dos2unix
      - name: Deploy
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/deploy.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Ubuntu installer
          path: ${{ github.workspace }}/*.deb
          retention-days: 90

  # OSX
  ci_osx:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'
      - name: Install NetCDF
        run: |
          brew install netcdf
          sudo cp -r /usr/local/include/netcdf $RUNNER_TOOL_CACHE/Python/2.7.18/x64/include
          sudo cp /usr/local/lib/libnetcdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
          sudo cp /usr/local/opt/netcdf/lib/libnetcdf* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
      - name: Install dependecies with pip
        run: |
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb
      - name: Install wx and vtk
        run: |
          sudo conda create -p $HOME/tempenv python=2.7
          sudo conda install -p $HOME/tempenv -c daf wxpython
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/wx $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo conda install -p $HOME/tempenv -c ccordoba12 vtk
          sudo cp -r $HOME/tempenv/lib/python2.7/site-packages/vtk $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib/python2.7/site-packages
          sudo cp $HOME/tempenv/lib/lib* $RUNNER_TOOL_CACHE/Python/2.7.18/x64/lib
      - name: Prepare virtual machine
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
      - name: Install ScientificPython
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd scientific-python
          sudo python2 setup.py install
      - name: Install MMTK
        run: |
          cd $HOME
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          sudo rm setup.py
          sudo cp $GITHUB_WORKSPACE/BuildServer/Unix/setup.py $HOME/mmtk
          sudo python2 setup.py install
      - name: Install MDANSE
        run: |
          cd $GITHUB_WORKSPACE
          python2 setup.py install
      - name: Run tests
        run: $GITHUB_WORKSPACE/BuildServer/Unix/tests.sh
      - name: Tar python
        run: |
          cd $RUNNER_TOOL_CACHE/Python/2.7.18
          mv x64 Resources
          tar -czf python.tar.gz Resources
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: OSX_artifacts
          path: ${{ runner.tool_cache }}/Python/2.7.18/python.tar.gz
          retention-days: 1

  deploy_osx:
    needs: ci_osx
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: OSX_artifacts
          path: ~/
      - run: |
          brew install netcdf
          mkdir -p ~/Contents
          tar -xzf ~/python.tar.gz -C $HOME/Contents
          $HOME/Contents/Resources/bin/python -c "import vtk"
          $HOME/Contents/Resources/bin/python -c "import wx"
      - name: Deploy MDANSE
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/deploy.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MacOS executable
          path: ${{ github.workspace }}/*.dmg
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, '19_continuous_integration' )

  deploy_osx_old:
    needs: ci_osx
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: OSX_artifacts
          path: ~/
      - run: |
          brew install netcdf
          mkdir -p ~/Contents
          tar -xzf ~/python.tar.gz -C $HOME/Contents
      - name: Deploy MDANSE
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          printenv
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/deploy_old.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MacOS executable
          path: ${{ github.workspace }}/*.dmg
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, '19_continuous_integration' )

  # WINDOWS
  ci_windows:
    runs-on: windows-2019
    if: False
    steps:
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          copy C:\Windows\System32\python27.dll %RUNNER_TOOL_CACHE%\Python\2.7.18\x64
          python -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro sphinx==1.6.7 stdeb
          cd "%GITHUB_WORKSPACE%\BuildServer\Windows\Dependencies\"
          python -m pip install PyQt4‑4.11.4‑cp27‑cp27m‑win_amd64.whl VTK‑6.3.0‑cp27‑cp27m‑win_amd64.whl wxPython_common‑3.0.2.0‑py2‑none‑any.whl wxPython‑3.0.2.0‑cp27‑none‑win_amd64.whl
          mkdir %HOME%\netcdf
        shell: cmd
      - name: Prepare NetCDF
        run: |
          choco install 7zip
          Invoke-WebRequest https://downloads.unidata.ucar.edu/netcdf-c/4.8.1/windows_installers/netCDF4.8.1-NC3-64.exe -UseBasicParsing -Outfile "$env:HOME\netcdf\netCDF.exe"
      - name: Extract NetCDF
        run: |
          cd %HOME%\netcdf
          "C:\Program Files\7-Zip\7z.exe" e netCDF.exe
          mkdir "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          copy "%HOME%\netcdf" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          cd /d "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          dir
          set PATH=%PATH%;%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf
        shell: cmd
      - name: Install VS2008
        run: |
          cd $env:HOME
          Invoke-WebRequest http://download.microsoft.com/download/8/1/d/81d3f35e-fa03-485b-953b-ff952e402520/VS2008ProEdition90dayTrialENUX1435622.iso -UseBasicParsing -Outfile $env:HOME\vs2008.iso
          Mount-DiskImage -ImagePath $env:HOME\vs2008.iso
          Start-Process E:\Setup\setup.exe -ArgumentList "/q /full /norestart" -Wait
      - name: Install ScientificPython
        run: |
          cd "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64"
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd scientific-python
          python setup.py build --netcdf_prefix="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf" --netcdf_dll="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          python setup.py install --netcdf_prefix="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf" --netcdf_dll="%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf"
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf.dll" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Lib\site-packages\Scientific"
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf.h" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Include\Scientific"
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\netcdf.lib" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Lib\site-packages\Scientific"
        shell: cmd
      - name: Install MMTK
        run: |
          cd "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64"
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          python setup.py build install
          copy "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\netcdf\vcruntime140.dll" "%RUNNER_TOOL_CACHE%\Python\2.7.18\x64\Lib\site-packages\Scientific"
        shell: cmd
      - name: Install MDANSE
        run: |
          cd %GITHUB_WORKSPACE%
          python setup.py build install
        shell: cmd
      - name: Run tests
        run: |
          cd %GITHUB_WORKSPACE%\Tests
          python UnitTests\AllTests.py
          python DependenciesTests\AllTests.py
          python FunctionalTests\Jobs\BuildJobTests.py
          python FunctionalTests\Jobs\AllTests.py
        shell: cmd
      - name: Zip python file
        run: Compress-Archive -Path "$env:RUNNER_TOOL_CACHE\Python\2.7.18\x64\*" -DestinationPath "$env:GITHUB_WORKSPACE\python.zip"
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows_artifacts
          path: ${{ github.workspace }}/python.zip
          retention-days: 1

  deploy_windows:
    needs: ci_windows
    runs-on: windows-2019
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, '19_continuous_integration' )
    steps:
      - uses: actions/checkout@v2
      - name: Install VS2008
        run: |
          cd $env:HOME
          Invoke-WebRequest http://download.microsoft.com/download/8/1/d/81d3f35e-fa03-485b-953b-ff952e402520/VS2008ProEdition90dayTrialENUX1435622.iso -UseBasicParsing -Outfile $env:HOME\vs2008.iso
          Mount-DiskImage -ImagePath $env:HOME\vs2008.iso
          Start-Process E:\Setup\setup.exe -ArgumentList "/q /full /norestart" -Wait
      - name: Set up virtual machine
        run: |
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\definitions.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\setup_ci.bat"
          mkdir %GITHUB_WORKSPACE%\BuildServer\Windows\Build
        shell: cmd
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows_artifacts
          path: ${{ github.workspace }}\
      - name: Unzip artifacts
        run: Expand-Archive -Path "$env:GITHUB_WORKSPACE\python.zip" -DestinationPath "$env:GITHUB_WORKSPACE\BuildServer\Windows\Build"
      - name: Deploy
        run: |
          cd %GITHUB_WORKSPACE%\BuildServer\Windows\Build\
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\definitions.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\setup_ci.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\deploy.bat"
        shell: cmd
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_executable
          path: ${{ github.workspace }}\*.exe
          retention-days: 90