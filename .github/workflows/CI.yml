name: CI/CD

on: [push, workflow_dispatch]

jobs:
  docker_pre_clean:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
      - run: $GITHUB_WORKSPACE/BuildServer/Docker/clean.sh
  
  ci_ubuntu:
    if: always()
    needs: docker_pre_clean
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install NetCDF
        run: sudo apt-get install netcdf-bin libnetcdf-dev
      - name: Set up docker
        run: docker build --force-rm=true -t ci_mdanse_bionic -f $GITHUB_WORKSPACE/BuildServer/Docker/Ubuntu-bionic/Dockerfile_setup .
      - name: Build MDANSE
        run: docker build --force-rm=true --build-arg CI_COMMIT_SHORT_SHA=${GITHUB_SHA::8} --build-arg CI_COMMIT_REF_NAME=$GITHUB_REF --no-cache -t ci_mdanse_bionic_build -f $GITHUB_WORKSPACE/BuildServer/Docker/Ubuntu-bionic/Dockerfile_build .
      - name: Generate artifacts
        run: docker run -iv$PWD:/artifacts/ ci_mdanse_bionic_build
      - name: 'Archive artifacts'
        uses: actions/upload-artifact@v2
        with:
          path: |
            $GITHUB_WORKSPACE/build
            $GITHUB_WORKSPACE/temp
          retention-days: 1/24

  deploy_ubuntu:
    runs-on: ubuntu-18.04
    needs: ci_ubuntu
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, '19_continuous_integration' )
    steps:
      - uses: actions/checkout@v2
      - name: Set up docker
        run: docker build --force-rm=true -t ci_mdanse_bionic -f $GITHUB_WORKSPACE/BuildServer/Docker/Ubuntu-bionic/Dockerfile_setup .
      - name: Deploy
        run: docker build --force-rm=true --build-arg CI_COMMIT_SHORT_SHA=${GITHUB_SHA::8} --build-arg CI_COMMIT_REF_NAME=$GITHUB_REF --no-cache -t ci_mdanse_bionic_build -f $GITHUB_WORKSPACE/BuildServer/Docker/Ubuntu-bionic/Dockerfile_deploy .
      - name: Generate artifacts
        run: docker run -iv${PWD}:/artifacts/ ci_mdanse_bionic_build
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: $GITHUB_WORKSPACE/*.deb 
          retention-days: 1/24
  
  docker_post_clean:
    if: always()
    needs: deploy_ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
      - run: $GITHUB_WORKSPACE/BuildServer/Docker/clean.sh

  test_ubuntu:
    runs-on: ubuntu-18.04
    steps:
      - name: Install libraries
        run: sudo apt-get install netcdf-bin libnetcdf-dev libwxgtk3.0-dev python-wxgtk3.0 libvtk6.3 libvtk6-dev python-vtk6
      - name: Install python dependencies with pip
        run: |
          cd $HOME
          python -m pip install virtualenv
          python2 -m virtualenv $HOME/mdanse_venv
          source $HOME/mdanse_venv/bin/activate
          pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro
      - name: Install ScientificPython
        run: |
          git clone https://code.ill.fr/scientific-software/scientific-python.git
          cd /scientific-python/
          python setup.py build
          python setup.py install
      - name: Install MMTK
        run: |
          cd ..
          git clone https://code.ill.fr/scientific-software/mmtk.git
          cd mmtk
          python setup.py build
          python setup.py install
      - name: Install MDANSE
        uses: actions/checkout@v2
        run: |
          cd $GITHUB_WORKSPACE
          python setup.py build
          python setup.py install

  # OSX
  ci_osx:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Install NetCDF
        run: brew install netcdf
      - name: Install dependecies
        run: |
          python2 -m pip install virtualenv
          python2 -m virtualenv $HOME/mdanse_venv
          source $HOME/mdanse_venv/bin/activate
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro
      - run: python -c "import numpy.distutils.misc_util"
      - name: Prepare virtual machine
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
      - name: Build MDANSE
        run: |
          $GITHUB_WORKSPACE/BuildServer/Unix/build.sh
      - name: Run tests
        run: $GITHUB_WORKSPACE/BuildServer/Unix/tests.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: OSX_artifacts
          path: |
            $GITHUB_WORKSPACE/build
            $GITHUB_WORKSPACE/temp
          retention-days: 1/24
  
  deploy_osx:
    needs: ci_osx
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: OSX_artifacts
      - name: Prepare virtual machine
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
      - name: Deploy
        run: $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/deploy.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: OSX_deploy_artifacts
          path: $GITHUB_WORKSPACE/*.dmg
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
  
  # WINDOWS
  ci_windows:
    runs-on: windows-2019
    steps:
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '2.7.18'
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          python2 -m pip install virtualenv
          python2 -m virtualenv %HOME%\mdanse_venv
          %HOME%\mdanse_venv\Scripts\activate.bat
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro
      - name: Set up virtual machine
        run: |
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\definitions.bat"
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\setup_ci.bat"
        shell: cmd
      - name: Build MDANSE
        run: call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\build.bat"
        shell: cmd
      - name: Run tests
        run: call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\tests.bat"
        shell: cmd
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_artifacts
          path: |
            "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\Build"
            "%GITHUB_WORKSPACE%\\build"
            "%GITHUB_WORKSPACE%\\Extensions"
          retention-days: 1/24
  
  deploy_windows:
    needs: ci_windows
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: Windows_artifacts
      - name: Set up virtual machine
        run: |
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\definitions.bat"
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\setup_ci.bat"
        shell: cmd
      - name: Deploy
        run: call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\deploy.bat"
        shell: cmd
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_deploy_artifacts
          path: "%GITHUB_WORKSPACE%\\*.exe"
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
