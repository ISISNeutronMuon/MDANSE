name: CI/CD

on: [push, workflow_dispatch]

jobs:
  ci_ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04']

    steps:
      - uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.13'

      - name: Install netcdf binaries
        run: |
          sudo apt-get update
          sudo apt install netcdf-bin libnetcdf-dev

      - name: Install dependencies
        run: |
          python3 -m pip install numpy matplotlib Cython netCDF4 pyyaml h5py vtk

      - name: Install MDANSE
        run: |
          cd $GITHUB_WORKSPACE
          python3 setup.py install

      - name: Run tests
        if: false
        run: |
          export PATH=$PATH:/usr/lib/x86_64-linux-gnu
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          $GITHUB_WORKSPACE/BuildServer/Unix/tests.sh

      - name: Tar artifacts
        if: |
          contains( github.ref, 'main' ) ||
          contains( github.ref, 'develop' ) ||
          contains( github.ref, 'release-' ) ||
          contains( github.ref, 'hotfix-' ) ||
          contains( github.ref, 'build-' ) ||
          contains( github.ref, 'tags' ) ||
          contains( github.ref, 'web' ) ||
          contains( github.ref, 'cicd' )
        run: |
          cd $RUNNER_TOOL_CACHE/Python/3.9.13
          mv x64 python
          tar -czf python.tar.gz python

      - name: Upload artifacts
        if: |
          contains( github.ref, 'main' ) ||
          contains( github.ref, 'develop' ) ||
          contains( github.ref, 'release-' ) ||
          contains( github.ref, 'hotfix-' ) ||
          contains( github.ref, 'build-' ) ||
          contains( github.ref, 'tags' ) ||
          contains( github.ref, 'web' ) ||
          contains( github.ref, 'cicd' )
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_artifacts
          path: ${{ runner.tool_cache }}/Python/3.9.13/python.tar.gz
          retention-days: 1


  deploy_ubuntu:
    needs: ci_ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04']
    if: |
      contains( github.ref, 'main' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, 'cicd' )
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}_artifacts
          path: ~/

      - name: Untar artifacts
        run: tar -xzf ~/python.tar.gz -C $HOME

      - name: Install netcdf
        run: |
          sudo apt-get update
          sudo apt-get install netcdf-bin libnetcdf-dev dos2unix graphviz libgtk-3-dev

      - name: Install wx and sphinx
        run: |
          export LD_LIBRARY_PATH=~/python/lib:$LD_LIBRARY_PATH
          ~/python/bin/python -m pip install attrdict3
          ~/python/bin/python -m pip install wxpython sphinx distro psutil

      - name: Deploy
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/deploy.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_installer
          path: ${{ github.workspace }}/*.deb
          retention-days: 90

      - name: Edit postinst
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        run: sed -i '$ a ln -s /usr/lib/x86_64-linux-gnu/libnetcdf.so.18 /usr/local/lib/libnetcdf.so.15' $GITHUB_WORKSPACE/BuildServer/Unix/Debian/Resources/DEBIAN/postinst

      - name: Deploy for ubuntu 21
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          export DISTRO=ubuntu-21.04
          source $GITHUB_WORKSPACE/BuildServer/Unix/Debian/deploy.sh

      - name: Upload ubuntu21 artifacts
        if: ${{ (matrix.os == 'ubuntu-20.04') }}
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-21.04_installer
          path: ${{ github.workspace }}/*21*.deb
          retention-days: 90



  # OSX
  ci_osx:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['macos-11', 'macos-12']

    steps:
      - uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.13'

      - name: Install dependencies with pip
        run: |
          python3 -m pip install numpy matplotlib Cython pyyaml h5py vtk netCDF4

      - name: Install NetCDF
        run: |
          brew install netcdf

      - name: Install MDANSE
        run: |
          cd $GITHUB_WORKSPACE
          python3 setup.py install

      - name: Run unit tests
        if: false
        run: |
          cd $GITHUB_WORKSPACE/Tests/UnitTests
          python3 AllTests.py

      - name: Run functional tests
        if: false
        run: |
          cd $GITHUB_WORKSPACE/Tests/FunctionalTests/Jobs
          python3 BuildJobTests.py
          python3 AllTests.py

      - name: Tar python
        if: ${{ (matrix.os == 'macos-12') && ( contains( github.ref, 'main' ) || contains( github.ref, 'develop' ) || contains( github.ref, 'release-' ) || contains( github.ref, 'hotfix-' ) || contains( github.ref, 'build-' ) || contains( github.ref, 'tags' ) || contains( github.ref, 'web' ) || contains( github.ref, 'cicd' ) ) }}
        run: |
          cd $RUNNER_TOOL_CACHE/Python/3.9.13
          mv x64 Resources
          tar -czf python.tar.gz Resources

      - name: Upload artifacts
        if: ${{ (matrix.os == 'macos-12') && ( contains( github.ref, 'main' ) || contains( github.ref, 'develop' ) || contains( github.ref, 'release-' ) || contains( github.ref, 'hotfix-' ) || contains( github.ref, 'build-' ) || contains( github.ref, 'tags' ) || contains( github.ref, 'web' ) || contains( github.ref, 'cicd' ) ) }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_artifacts
          path: ${{ runner.tool_cache }}/Python/3.9.13/python.tar.gz
          retention-days: 1


  deploy_osx:
    needs: ci_osx
    runs-on: macos-12
    if: |
      contains( github.ref, 'main' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) || 
      contains( github.ref, 'cicd' )
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos-12_artifacts
          path: ~/

      - run: brew install netcdf graphviz

      - name: Untar python
        run: |
          mkdir -p ~/Contents
          tar -xzf ~/python.tar.gz -C $HOME/Contents

      - name: Install py2app, wxpython, and sphinx
        run: |
          sudo install_name_tool -change /Users/runner/hostedtoolcache/Python/3.9.13/x64/lib/libpython3.9.dylib /Users/runner/Contents/Resources/lib/libpython3.9.dylib /Users/runner/Contents/Resources/bin/python3.9
          sudo install_name_tool -change /Users/runner/hostedtoolcache/Python/3.9.13/x64/lib/libpython3.9.dylib /Users/runner/Contents/Resources/lib/libpython3.9.dylib /Users/runner/Contents/Resources/bin/python
          $HOME/Contents/Resources/bin/python -m pip install py2app==0.26.1 wxpython sphinx psutil distro

      - name: Deploy MDANSE
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/deploy.sh
          sudo cp -fv $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/Resources/README.txt $GITHUB_WORKSPACE

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MacOS executable
          path: |
            ${{ github.workspace }}/*.dmg
            ${{ github.workspace }}/README.txt
          retention-days: 90



  # WINDOWS
  ci_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.13'

      - name: Install backend dependencies
        run: |
          python3 -m pip install numpy matplotlib Cython pyyaml h5py netCDF4 vtk
        shell: cmd

      - name: Install MDANSE
        run: |
          cd %GITHUB_WORKSPACE%
          python3 setup.py install
        shell: cmd

      - name: Run unit tests
        if: false
        run: |
          cd %GITHUB_WORKSPACE%\Tests\UnitTests\
          python3 AllTests.py
        shell: cmd

      - name: Run functional tests
        if: false
        run: |
          cd %GITHUB_WORKSPACE%\Tests\FunctionalTests\Jobs
          python3 BuildJobTests.py
          python3 AllTests.py
        shell: cmd

      - name: Tar artifacts
        if: |
          contains( github.ref, 'main' ) ||
          contains( github.ref, 'develop' ) ||
          contains( github.ref, 'release-' ) ||
          contains( github.ref, 'hotfix-' ) ||
          contains( github.ref, 'build-' ) ||
          contains( github.ref, 'tags' ) ||
          contains( github.ref, 'web' ) ||
          contains( github.ref, 'cicd' )
        run: |
          cd /D %RUNNER_TOOL_CACHE%/Python/3.9.13
          ren x64 python
          dir
          tar -czf python.tar.gz .\python
        shell: cmd

      - name: Upload artifacts
        if: |
          contains( github.ref, 'main' ) ||
          contains( github.ref, 'develop' ) ||
          contains( github.ref, 'release-' ) ||
          contains( github.ref, 'hotfix-' ) ||
          contains( github.ref, 'build-' ) ||
          contains( github.ref, 'tags' ) ||
          contains( github.ref, 'web' ) ||
          contains( github.ref, 'cicd' )
        uses: actions/upload-artifact@v2
        with:
          name: windows_artifacts
          path: ${{ runner.tool_cache }}/Python/3.9.13/python.tar.gz
          retention-days: 1

  deploy_windows:
    runs-on: windows-2019
    needs: ci_windows
    if: |
      contains( github.ref, 'main' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' ) ||
      contains( github.ref, 'cicd' )
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows_artifacts
          path: ${{ github.workspace }}

      - name: Untar python
        run: |
          cd /D %GITHUB_WORKSPACE%
          tar -xkf python.tar.gz
        shell: cmd

      - name: Install packages required for documentation and psutil
        run: |
          %GITHUB_WORKSPACE%\python\python.exe -m pip install sphinx psutil distro wxpython
        shell: cmd

      - name: Deploy
        run: |
          mkdir %GITHUB_WORKSPACE%\BuildServer\Windows\Build
          cd %GITHUB_WORKSPACE%\BuildServer\Windows\Build\
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\definitions.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\setup_ci.bat"
          call "%GITHUB_WORKSPACE%\BuildServer\Windows\deploy.bat"
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_executable
          path: |
            ${{ github.workspace }}\*.exe
            ${{ github.workspace }}\python\ONSISlog.txt
          retention-days: 90