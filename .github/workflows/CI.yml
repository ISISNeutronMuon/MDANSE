name: CI/CD

on: [push, workflow_dispatch]

jobs:
  docker_pre_clean:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
      - run: $GITHUB_WORKSPACE/BuildServer/Docker/clean.sh
  
  ci_ubuntu:
    if: always()
    needs: docker_pre_clean
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install NetCDF
        run: sudo apt-get install netcdf-bin libnetcdf-dev
      - name: Set up docker
        run: docker build --force-rm=true -t ci_mdanse_bionic -f $GITHUB_WORKSPACE/BuildServer/Docker/Ubuntu-bionic/Dockerfile_setup .
      - name: Build MDANSE
        run: docker build --force-rm=true --build-arg CI_COMMIT_SHORT_SHA=${GITHUB_SHA::8} --build-arg CI_COMMIT_REF_NAME=$GITHUB_REF --no-cache -t ci_mdanse_bionic_build -f $GITHUB_WORKSPACE/BuildServer/Docker/Ubuntu-bionic/Dockerfile_build .
      - name: Generate artifacts
        run: docker run -iv$PWD:/artifacts/ ci_mdanse_bionic_build
      - name: 'Archive artifacts'
        uses: actions/upload-artifact@v2
        with:
          path: |
            $GITHUB_WORKSPACE/build
            $GITHUB_WORKSPACE/temp
          retention-days: 1/24

  deploy_ubuntu:
    runs-on: ${{ matrix.os }}
    needs: ci_ubuntu
    strategy:
      matrix:
        os: [""]
        name: ['']
        tag: ['']
        build: ['']
        include:
          - os: ubuntu-18.04
            name: ubuntu_bionic
            tag: ci_mdanse_bionic
            build: ci_mdanse_bionic_build
          - os: ubuntu-20.04
            name: ubuntu_xenial
            tag: ci_mdanse_xenial
            build: ci_mdanse_xenial_build
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
    steps:
      - uses: actions/checkout@v2
      - name: Set up docker
        run: docker build --force-rm=true -t ${{ matrix.tag }} -f $GITHUB_WORKSPACE/BuildServer/Docker/${{ matrix.name }}/Dockerfile_setup .
      - name: Deploy
        run: docker build --force-rm=true --build-arg CI_COMMIT_SHORT_SHA=${GITHUB_SHA::8} --build-arg CI_COMMIT_REF_NAME=$GITHUB_REF --no-cache -t ${{ matrix.build }} -f $GITHUB_WORKSPACE/BuildServer/Docker/${{ matrix.name }}/Dockerfile_deploy .
      - name: Generate artifacts
        run: docker run -iv${PWD}:/artifacts/ ${{ matrix.build }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: $GITHUB_WORKSPACE/*.deb 
          retention-days: 1/24
  
  docker_post_clean:
    if: always()
    needs: deploy_ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
      - run: $GITHUB_WORKSPACE/BuildServer/Docker/clean.sh

  test_ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-latest]
    steps:
      - name: Install libraries
        run: sudo apt-get install netcdf-bin libnetcdf-dev
      - name: Install python dependencies with pip
        run: |
          cd $HOME
          #wget https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
          #sudo python2 get-pip.py
          pip install virtualenv
          python2 -m virtualenv $HOME/mdanse_venv
          source $HOME/mdanse_venv/bin/activate
          pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro
      - name: Install wx
        run: |
          wget https://sourceforge.net/projects/wxpython/files/wxPython/3.0.2.0/wxPython-src-3.0.2.0.tar.bz2
          tar -xf wxPython-src-3.0.2.0.tar.bz2
          cd wxPython-src-3.0.2.0/wxPython
          python2 build-wxpython.py --build_dir=../bld
          export PYTHONPATH=$PYTHONPATH:$HOME/wxPython-src-3.0.2.0/wxPython/
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/wxPython-src-3.0.2.0/bld/lib/
  
  # OSX
  ci_osx:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Install NetCDF
        run: brew install netcdf
      - name: Install dependecies
        run: python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro
      - name: Prepare virtual machine
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
      - name: Build MDANSE
        run: |
          $GITHUB_WORKSPACE/BuildServer/Unix/build.sh
      - name: Run tests
        run: $GITHUB_WORKSPACE/BuildServer/Unix/tests.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: OSX_artifacts
          path: |
            $GITHUB_WORKSPACE/build
            $GITHUB_WORKSPACE/temp
          retention-days: 1/24
  
  deploy_osx:
    needs: ci_osx
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: OSX_artifacts
      - name: Prepare virtual machine
        run: |
          source $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/definitions.sh
          source $GITHUB_WORKSPACE/BuildServer/Unix/setup_ci.sh
      - name: Deploy
        run: $GITHUB_WORKSPACE/BuildServer/Unix/MacOS/deploy.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: OSX_deploy_artifacts
          path: $GITHUB_WORKSPACE/*.dmg
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
  
  # WINDOWS
  ci_windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          choco install python2 --params '"/InstallDir:%HOME%\Python2"'
          # wget https://downloads.unidata.ucar.edu/netcdf-c/4.8.1/windows_installers/netCDF4.8.1-NC3-64.exe -UseBasicParsing -O netcdf.exe
          #curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
          #python2 get-pip.py
          #python2 -m pip install setuptools<45 wheel
          python -m pip install virtualenv
          python2 -m virtualenv %HOME%\mdanse_venv
          %HOME%\mdanse_venv\Scripts\activate.bat
          python2 -m pip install numpy==1.16.6 matplotlib==2.2.5 Cython==0.29.24 Pyro
      - name: Set up virtual machine
        run: |
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\definitions.bat"
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\setup_ci.bat"
        shell: cmd
      - name: Build MDANSE
        run: call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\build.bat"
        shell: cmd
      - name: Run tests
        run: call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\tests.bat"
        shell: cmd
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_artifacts
          path: |
            "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\Build"
            "%GITHUB_WORKSPACE%\\build"
            "%GITHUB_WORKSPACE%\\Extensions"
          retention-days: 1/24
  
  deploy_windows:
    needs: ci_windows
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: Windows_artifacts
      - name: Set up virtual machine
        run: |
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\definitions.bat"
          call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\setup_ci.bat"
        shell: cmd
      - name: Deploy
        run: call "%GITHUB_WORKSPACE%\\BuildServer\\Windows\\deploy.bat"
        shell: cmd
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows_deploy_artifacts
          path: "%GITHUB_WORKSPACE%\\*.exe"
    if: |
      contains( github.ref, 'master' ) ||
      contains( github.ref, 'develop' ) ||
      contains( github.ref, 'release-' ) ||
      contains( github.ref, 'hotfix-' ) ||
      contains( github.ref, 'build-' ) ||
      contains( github.ref, 'tags' ) ||
      contains( github.ref, 'web' )
